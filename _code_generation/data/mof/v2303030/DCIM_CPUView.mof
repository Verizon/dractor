// Copyright (c) 2010 Dell Inc.  All rights reserved.
// ==================================================================
// DCIM_CPUView
// ==================================================================
  [Version ( "1.0.0" ), Description(
       "DCIM_CPUView is a derivation of CIM_View "
       "with Processor and Processor Cache specific data" )]
class DCIM_CPUView : DCIM_View {
      [Key, Description (
          "A string containing the Fully Qualified Device Description "
          "A user-friendly name for the object. This property allows each "
          " instance to define a user-friendly name in addition to its key "
          " properties, identity data, and description information." )]
   string InstanceID;

      [Description (
          "A string containing the Fully Qualified Device Description "
          "A user-friendly name for the object. This property allows each "
          " instance to define a user-friendly name in addition to its key "
          " properties, identity data, and description information." )]
   string FQDD;

      [Description (
          "A string containing the friendly Fully Qualified Device Description "
          "A property that describes the device and its location"
          )]
   string DeviceDescription;

      [Description (
          "The property represents the FQDD for the slot that the processor is "
          "plugged in into. " )]
   string SlotFQDD;

[Description ( 
          "The Processor family type. For example, values include "
          "\"Pentium(R) processor with MMX(TM) technology\" "
          "(value=14) and \"68040\" (value=96)." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", 
          // 11                   
          "B", "C", "D", "E", 
          "F", "10", "11", "12", "13", "14", "15",
          // 24                   
          "18", "19", "1A", "1B", 
          "1C", "1D", "1E", "1F", "20", "21", "22", "23", "24", 
          "25", "26", "27", "28", "29", "2A", "2B", 
          // 48                   
          "30", "31", "32", "33", 
          "34", "35", "36", "37", "38", "39", "3A", "3B", "3C", "3D", "3E",
          // 64                   
          "40", "41", "42", "43", 
          "44", "45", "46", "47", "48", "49", 
          "50", "51", 
          "52", "53", "54", "55", "56", "57", "58", 
          // 96           
          "60", "61", "62", 
          "63", "64", "65", 
          // 112                   
          "70", "78", "79", 
          "7A", "80", "82", "83", "84", "85", "86", 
          // 135
          "87", "88", "89", "8A", "8B", "8C", 
          "8D", "8E", "8F", 
          // 144                      
          "90", "91", 
          "92", "93", "94", "95", "96", 
          // 160                      
          "A0", "A1", 
          "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", 
          // 170
          "AA", "AB", "AC", "AD", "AE", "AF", 
          "B0", "B1", "B2", "B3", 
          "B4", "B5", 
          "B6", "B7", "B8", "B9", "BA", "BB", "BC", "BD", 
          // 190                   
          "BE", "BF", "C0", 
          "C1", "C2", "C3", "C4", "C5", "C6", "C7", 
          // 200                   
          "C8", "C9", "CA", 
          "CB", "CC", "CD", "CE", 
          "D2", "D3", 
          "D4", "D5", "D6", "D7", "D8", "D9", "DA", "DB", 
          // 220
          "DD", "DE", "DF", "E0", 
          // 230 
          "E6", "E7", "E8", "E9", "EA", 
          "EB", "EC", "ED", "EE", "EF", 
          // 250                 
          "FA", "FB", "FE", 
          "FF", "104", "105", "118", "119", 
          // 300                 
          "12C", "12D", "12E", 
          "140", "15E", "1F4", 
          // 65534                 
          "FFFE", "FFFF" }, 
       Values { "Other", "Unknown", "8086", "80286", "80386", 
          "80486", "8087", "80287", "80387", "80487", 
          // 11                     
          "Pentium(R) brand", 
          "Pentium(R) Pro", "Pentium(R) II", 
          "Pentium(R) processor with MMX(TM) technology", 
          "Celeron(TM)", "Pentium(R) II Xeon(TM)", "Pentium(R) III", 
          "M1 Family", "M2 Family", 
          "Intel(R) Celeron(R) M processor", 
          "Intel(R) Pentium(R) 4 HT processor", 
          // 24                    
          "K5 Family", 
          "K6 Family", "K6-2", "K6-3", 
          "AMD Athlon(TM) Processor Family", 
          "AMD(R) Duron(TM) Processor", "AMD29000 Family", 
          // 31                    
          "K6-2+", 
          "Power PC Family", "Power PC 601", "Power PC 603", 
          "Power PC 603+", "Power PC 604", "Power PC 620", 
          "Power PC X704", "Power PC 750", 
          "Intel(R) Core(TM) Duo processor", 
          "Intel(R) Core(TM) Duo mobile processor", 
          "Intel(R) Core(TM) Solo mobile processor", 
          "Intel(R) Atom(TM) processor", 
          // 48                     
          "Alpha Family", 
          "Alpha 21064", "Alpha 21066", "Alpha 21164", 
          "Alpha 21164PC", "Alpha 21164a", "Alpha 21264", 
          "Alpha 21364", 
          // 56
          "AMD Turion(TM) II Ultra Dual-Core Mobile M Processor Family", 
          "AMD Turion(TM) II Dual-Core Mobile M Processor Family", 
          "AMD Athlon(TM) II Dual-Core Mobile M Processor Family", 
          "AMD Opteron(TM) 6100 Series Processor", 
          "AMD Opteron(TM) 4100 Series Processor", 
          "AMD Opteron(TM) 6200 Series Processor", 
          "AMD Opteron(TM) 4200 Series Processor", 
          // 64                     
          "MIPS Family", 
          "MIPS R4000", "MIPS R4200", "MIPS R4400", "MIPS R4600", 
          "MIPS R10000", 
          "AMD C-Series Processor", 
          "AMD E-Series Processor", 
          "AMD S-Series Processor", 
          "AMD G-Series Processor", 
          // 80                     
          "SPARC Family", 
          "SuperSPARC", "microSPARC II", "microSPARC IIep", 
          "UltraSPARC", "UltraSPARC II", "UltraSPARC IIi", 
          "UltraSPARC III", "UltraSPARC IIIi", 
          // 96                     
          "68040", 
          "68xxx Family", "68000", "68010", "68020", "68030", 
          // 112                     
          "Hobbit Family", 
          "Crusoe(TM) TM5000 Family", "Crusoe(TM) TM3000 Family", 
          "Efficeon(TM) TM8000 Family", "Weitek", 
          "Itanium(TM) Processor", 
          "AMD Athlon(TM) 64 Processor Family", 
          "AMD Opteron(TM) Processor Family", 
          "AMD Sempron(TM) Processor Family", 
          "AMD Turion(TM) 64 Mobile Technology", 
          // 135                   
          "Dual-Core AMD Opteron(TM) Processor Family", 
          "AMD Athlon(TM) 64 X2 Dual-Core Processor Family", 
          "AMD Turion(TM) 64 X2 Mobile Technology", 
          "Quad-Core AMD Opteron(TM) Processor Family", 
          "Third-Generation AMD Opteron(TM) Processor Family", 
          "AMD Phenom(TM) FX Quad-Core Processor Family", 
          "AMD Phenom(TM) X4 Quad-Core Processor Family", 
          "AMD Phenom(TM) X2 Dual-Core Processor Family", 
          "AMD Athlon(TM) X2 Dual-Core Processor Family", 
          // 144                     
          "PA-RISC Family", 
          "PA-RISC 8500", "PA-RISC 8000", "PA-RISC 7300LC", 
          "PA-RISC 7200", "PA-RISC 7100LC", "PA-RISC 7100", 
          // 160                     
          "V30 Family", 
          // 161 
          "Quad-Core Intel(R) Xeon(R) processor 3200 Series", 
          "Dual-Core Intel(R) Xeon(R) processor 3000 Series", 
          "Quad-Core Intel(R) Xeon(R) processor 5300 Series", 
          "Dual-Core Intel(R) Xeon(R) processor 5100 Series", 
          "Dual-Core Intel(R) Xeon(R) processor 5000 Series", 
          "Dual-Core Intel(R) Xeon(R) processor LV", 
          "Dual-Core Intel(R) Xeon(R) processor ULV", 
          "Dual-Core Intel(R) Xeon(R) processor 7100 Series", 
          "Quad-Core Intel(R) Xeon(R) processor 5400 Series", 
          "Quad-Core Intel(R) Xeon(R) processor", 
          "Dual-Core Intel(R) Xeon(R) processor 5200 Series", 
          "Dual-Core Intel(R) Xeon(R) processor 7200 Series", 
          "Quad-Core Intel(R) Xeon(R) processor 7300 Series", 
          "Quad-Core Intel(R) Xeon(R) processor 7400 Series", 
          "Multi-Core Intel(R) Xeon(R) processor 7400 Series", 
          // 176 
          "Pentium(R) III Xeon(TM)", 
          "Pentium(R) III Processor with Intel(R) SpeedStep(TM) Technology", 
          "Pentium(R) 4", "Intel(R) Xeon(TM)", 
          // 180                     
          "AS400 Family", 
          "Intel(R) Xeon(TM) processor MP", 
          "AMD Athlon(TM) XP Family", "AMD Athlon(TM) MP Family", 
          "Intel(R) Itanium(R) 2", 
          "Intel(R) Pentium(R) M processor", 
          "Intel(R) Celeron(R) D processor", 
          "Intel(R) Pentium(R) D processor", 
          "Intel(R) Pentium(R) Processor Extreme Edition", 
          "Intel(R) Core(TM) Solo Processor", 
          // 190                     
          "K7", 
          "Intel(R) Core(TM)2 Duo Processor", 
          "Intel(R) Core(TM)2 Solo processor", 
          "Intel(R) Core(TM)2 Extreme processor", 
          "Intel(R) Core(TM)2 Quad processor", 
          "Intel(R) Core(TM)2 Extreme mobile processor", 
          "Intel(R) Core(TM)2 Duo mobile processor", 
          "Intel(R) Core(TM)2 Solo mobile processor", 
          "Intel(R) Core(TM) i7 processor", 
          "Dual-Core Intel(R) Celeron(R) Processor", 
          // 200                     
          "S/390 and zSeries Family", 
          "ESA/390 G4", "ESA/390 G5", "ESA/390 G6", 
          "z/Architectur base", 
          // 205
          "Intel(R) Core(TM) i5 processor", 
          "Intel(R) Core(TM) i3 processor", 
          // 210                   
          "VIA C7(TM)-M Processor Family", 
          "VIA C7(TM)-D Processor Family", 
          "VIA C7(TM) Processor Family", 
          "VIA Eden(TM) Processor Family", 
          "Multi-Core Intel(R) Xeon(R) processor", 
          "Dual-Core Intel(R) Xeon(R) processor 3xxx Series", 
          "Quad-Core Intel(R) Xeon(R) processor 3xxx Series", 
          "VIA Nano(TM) Processor Family", 
          "Dual-Core Intel(R) Xeon(R) processor 5xxx Series", 
          "Quad-Core Intel(R) Xeon(R) processor 5xxx Series", 
          // 221
          "Dual-Core Intel(R) Xeon(R) processor 7xxx Series", 
          "Quad-Core Intel(R) Xeon(R) processor 7xxx Series", 
          "Multi-Core Intel(R) Xeon(R) processor 7xxx Series", 
          "Multi-Core Intel(R) Xeon(R) processor 3400 Series", 
          // 230
          "Embedded AMD Opteron(TM) Quad-Core Processor Family", 
          "AMD Phenom(TM) Triple-Core Processor Family", 
          "AMD Turion(TM) Ultra Dual-Core Mobile Processor Family", 
          "AMD Turion(TM) Dual-Core Mobile Processor Family", 
          "AMD Athlon(TM) Dual-Core Processor Family", 
          "AMD Sempron(TM) SI Processor Family", 
          "AMD Phenom(TM) II Processor Family", 
          "AMD Athlon(TM) II Processor Family", 
          "Six-Core AMD Opteron(TM) Processor Family", 
          "AMD Sempron(TM) M Processor Family", 
          // 250                   
          "i860", "i960", 
          "Reserved (SMBIOS Extension)", 
          "Reserved (Un-initialized Flash Content - Lo)", "SH-3", 
          "SH-4", "ARM", "StrongARM", 
          // 300                   
          "6x86", "MediaGX", 
          "MII", "WinChip", "DSP", "Video Processor", 
          // 65534              
          "Reserved (For Future Special Purpose Assignment)", 
          "Reserved (Un-initialized Flash Content - Hi)" } ] 
   string CPUFamily;
   
      [Description ( "The current speed (in MHz) of this Processor." ), 
       Units ( "MegaHertz" ), 
       MappingStrings { "MIF.DMTF|Processor|017.6" }, 
       PUnit ( "hertz * 10^6" )]
   uint32 CurrentClockSpeed;
   
      [Description ( "The maximum speed (in MHz) of this Processor." ), 
       Units ( "MegaHertz" ), 
       MappingStrings { "MIF.DMTF|Processor|017.5" }, 
       PUnit ( "hertz * 10^6" )]
   uint32 MaxClockSpeed;
   
      [Description ( 
          "The speed (in MHz) of the external bus interface (also "
          "known as the front side bus)." ), 
       Units ( "MegaHertz" ), 
       PUnit ( "hertz * 10^6" )]
   uint32 ExternalBusClockSpeed;

      [Description (
          "PrimaryStatus provides a high level status value, intended to align"
          "with Red-Yellow-Green type representation of status. It should be"
          "used in conjunction with DetailedStatus to provide high level and"
          " detailed health status of the ManagedElement and its subcomponents."
          "PrimaryStatus consists of one of the following values: Unknown, OK,"
          "Degraded or Error. \"Unknown\" indicates the implementation is in"
          "general capable of returning this property, but is unable to do so"
          "at this time. \"OK\" indicates the ManagedElement is functioning "
         "normally. \"Degraded\" indicates the ManagedElement is functioning"
         "below normal. \"Error\" indicates the ManagedElement is in an Error"
         " condition. " ),
       ValueMap { "0", "1", "2", "3", "0x8000", "0xFFFF" },
       Values { "Unknown", "OK", "Degraded", "Error",
               "DMTF Reserved", "Vendor Reserved" }]
   uint32 PrimaryStatus;

      [Experimental, Description ( 
          "Number of processor cores enabled for processor." )]
   uint32 NumberOfEnabledCores = 1;
   
      [Experimental, Description ( 
          "Number of threads enabled for processor." )]
   uint32 NumberOfEnabledThreads;
   
      [Description ( 
          "Number of processor cores available for processor. This "
          "number would not include cores disabled by hardware and "
          "may be obtained from SMBIOS 2.5 Type 4 offset 23h." )]
   uint32 NumberOfProcessorCores;
      
    [Description (
            "The voltage(s) supported by the processor.") ]
   string Voltage;

      [Description ( 
          "The CPUStatus property that indicates the current status "
          "of the Processor. For example, the Processor might be "
          "disabled due to a POST error (value=3). Information in"
          "this property can be obtained from SMBIOS, the Type 4 "
          "structure, and the Status attribute." ), 
       ValueMap { "0", "1", "2", "3", "4", "7" }, 
       Values { "Unknown", "CPU Enabled", "CPU Disabled by User", 
          "CPU Disabled By BIOS (POST Error)", "CPU Is Idle", "Other" }]
   uint16 CPUStatus;
   
   [Experimental, Description ( 
          "Array of enumerated values that describes the "
          "characteristics of the processor. The characteristics "
          "include certain features of the processor such as 64 bit "
          "support for data width of the processor. Note that if "
          "this property does not contain the value corresponding "
          "to a feature of the processor, than the feature either "
          "is not that some of the features of the processor may "
          "exist but may not be enabled. To find the the currently "
          "enabled features the processor, reffer to the "
          "EnabledProcessorCharacteristics property. Values "
          "specified in the enumeration may be obtained from SMBIOS "
          "v2.5 Type 4 offset 26h (Processor Characteristics Word). "
          "32-bit Capable - describes whether the processor has the "
          "capability for 32 bits data width. 64-bit Capable - "
          "describes whether the processor has the capability for "
          "64 bits data width. Enhanced Virtualization - describes "
          "whether the processor has the capability for executing "
          "enhanced virtualization instructions. Hardware Thread - "
          "indicates that the processor is capable of the hardware "
          "threading. NX-bit - describes whether the processor has "
          "capability to utilize non-execute bit and can "
          "differentiate the memory marked strictly for storage. "
          "Power/Performance Control - describes whether the "
          "processor has capability for load based power savings. "
          "Core Frequency Boosting - describes whether the "
          "processor has a capability for one processor core to "
          "increase its frequency whenever the other core has gone "
          "into an idle state." ), 
       ValueMap { "2", "4"}, 
       Values { "Unknown","64-bit Capable"}]
   uint32 Characteristics;

	[Description (
          "Variable that specifies if HyperThreading is Enabled" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
    uint8 HyperThreadingEnabled;
	
	 [Description (
          "Variable that specifies if HyperThreading is Capable" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
   uint8 HyperThreadingCapable;
 
	 [Description (
          "Variable that specifies if VirtualizationTechnology is enabled" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
  uint8 VirtualizationTechnologyEnabled;

	 [Description (
          "Variable that specifies if VirtualizationTechnology is Capable" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
   uint8 VirtualizationTechnologyCapable;

	 [Description (
          "Variable that specifies if VirtualizationTechnology is enabled" ),
       ValueMap { "0", "1" , "2"},
       Values { "No", "Yes", "Not Applicable"}]
   uint8 ExecuteDisabledEnabled;

	 [Description (
          "Variable that specifies if ExecuteDisabledCapable is Capable" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
   uint8 ExecuteDisabledCapable;

	 [Description (
          "Variable that specifies if TurboMode is enabled" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
   uint8 TurboModeEnabled;

	 [Description (
          "Variable that specifies if TurboMode is Capable" ),
       ValueMap { "0", "1" },
       Values { "No", "Yes"}]
   uint8 TurboModeCapable;

   
   [Description ( 
          "The name of the organization responsible for producing "
          "the processor." )]
   string Manufacturer;
   
      [Description ( "The make and or model of the processor." )]
   string Model;


   
   [Description ( 
          "The total memory size of the cache in KBytes. "),  
       PUnit ( "byte * 10^3" )]
   uint64 Cache1Size;

   [Description ( 
          "The total memory size of the cache in KBytes. "),  
       PUnit ( "byte * 10^3" )]
   uint64 Cache2Size;

   [Description ( 
          "The total memory size of the cache in KBytes. "),  
       PUnit ( "byte * 10^3" )]
   uint64 Cache3Size;
    

      [Description (
          "PrimaryStatus provides a high level status value, intended to align"
          "with Red-Yellow-Green type representation of status. It should be"
          "used in conjunction with DetailedStatus to provide high level and"
          " detailed health status of the ManagedElement and its subcomponents."
          "PrimaryStatus consists of one of the following values: Unknown, OK,"
          "Degraded or Error. \"Unknown\" indicates the implementation is in"
          "general capable of returning this property, but is unable to do so"
          "at this time. \"OK\" indicates the ManagedElement is functioning "
          "normally. \"Degraded\" indicates the ManagedElement is functioning"
          "below normal. \"Error\" indicates the ManagedElement is in an Error"
          " condition. " ),
       ValueMap { "0", "1", "2", "3", "0x8000", "0xFFFF" },
       Values { "Unknown", "OK", "Degraded", "Error",
               "DMTF Reserved", "Vendor Reserved" }]
   uint32 Cache1PrimaryStatus;
   
      [Description (
          "PrimaryStatus provides a high level status value, intended to align"
          "with Red-Yellow-Green type representation of status. It should be"
          "used in conjunction with DetailedStatus to provide high level and"
          " detailed health status of the ManagedElement and its subcomponents."
          "PrimaryStatus consists of one of the following values: Unknown, OK,"
          "Degraded or Error. \"Unknown\" indicates the implementation is in"
          "general capable of returning this property, but is unable to do so"
          "at this time. \"OK\" indicates the ManagedElement is functioning "
          "normally. \"Degraded\" indicates the ManagedElement is functioning"
          "below normal. \"Error\" indicates the ManagedElement is in an Error"
          " condition. " ),
       ValueMap { "0", "1", "2", "3", "0x8000", "0xFFFF" },
       Values { "Unknown", "OK", "Degraded", "Error",
               "DMTF Reserved", "Vendor Reserved" }]
   uint32 Cache2PrimaryStatus;
   
      [Description (
          "PrimaryStatus provides a high level status value, intended to align"
          "with Red-Yellow-Green type representation of status. It should be"
          "used in conjunction with DetailedStatus to provide high level and"
          " detailed health status of the ManagedElement and its subcomponents."
          "PrimaryStatus consists of one of the following values: Unknown, OK,"
          "Degraded or Error. \"Unknown\" indicates the implementation is in"
          "general capable of returning this property, but is unable to do so"
          "at this time. \"OK\" indicates the ManagedElement is functioning "
          "normally. \"Degraded\" indicates the ManagedElement is functioning"
          "below normal. \"Error\" indicates the ManagedElement is in an Error"
          " condition. " ),
       ValueMap { "0", "1", "2", "3", "0x8000", "0xFFFF" },
       Values { "Unknown", "OK", "Degraded", "Error",
               "DMTF Reserved", "Vendor Reserved" }]
   uint32 Cache3PrimaryStatus;

   [Description (
          "Cache level of Cache1." ),
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"}, 
       Values { "L1","L2","L3","L4","L5","L6","L7","L8"}]
   uint16 Cache1Level;

   [Description (
          "Cache level of Cache2." ),
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"}, 
       Values { "L1","L2","L3","L4","L5","L6","L7","L8"}]
   uint16 Cache2Level;

   [Description (
          "Cache level of Cache3." ),
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7"}, 
       Values { "L1","L2","L3","L4","L5","L6","L7","L8"}]
   uint16 Cache3Level;

      [Description ( 
          "Defines whether this is write-back (value=1) or "
          "write-through (value=0) Cache, or whether this "
          "information \"Varies with Address\" (2) or "
          "\"Unknown\" (3) can be specified." ), 
       ValueMap { "0", "1", "2", "3"}, 
       Values { "Write Through","Write Back","Varies with Address","Unknown"}, 
       MappingStrings { "MIF.DMTF|System Cache|006.5" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherWritePolicyDescription" }]
   uint16 Cache1WritePolicy;

      [Description ( 
          "Defines whether this is write-back (value=1) or "
          "write-through (value=0) Cache, or whether this "
          "information \"Varies with Address\" (2) or "
          "\"Unknown\" (3) can be specified." ), 
       ValueMap { "0", "1", "2", "3"}, 
       Values { "Write Through","Write Back","Varies with Address","Unknown"},  
       MappingStrings { "MIF.DMTF|System Cache|006.5" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherWritePolicyDescription" }]
   uint16 Cache2WritePolicy;
   
      [Description ( 
          "Defines whether this is write-back (value=1) or "
          "write-through (value=0) Cache, or whether this "
          "information \"Varies with Address\" (2) or "
          "\"Unknown\" (3) can be specified." ), 
       ValueMap { "0", "1", "2", "3"}, 
       Values { "Write Through","Write Back","Varies with Address","Unknown"},  
       MappingStrings { "MIF.DMTF|System Cache|006.5" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherWritePolicyDescription" }]
   uint16 Cache3WritePolicy;
   [Description (
          "Cache SRAM Type" ),
       ValueMap { "1", "2", "4", "8", "16", "32", "64" },
       Values { "Other", "Unknown", "Non-Burst", "Burst", 
                "Pipeline Burst","Synchronous", "Asynchronous" }]
   uint16 Cache1SRAMType;

   [Description (
          "Cache SRAM Type"),
       ValueMap { "1", "2", "4", "8", "16", "32", "64" },
       Values { "Other", "Unknown", "Non-Burst", "Burst", 
                "Pipeline Burst","Synchronous", "Asynchronous" }]
   uint16 Cache2SRAMType;

   [Description (
          "Cache SRAM Type"),
       ValueMap { "1", "2", "4", "8", "16", "32", "64" },
       Values { "Other", "Unknown", "Non-Burst", "Burst", 
                "Pipeline Burst","Synchronous", "Asynchronous" }]
   uint16 Cache3SRAMType;

   [Description (
          "Cache ErrorMethodology - Contains the enumerated value "
          "that describes the cache's error detection/correction "
          "mechanism" ),
       ValueMap { "1", "2", "3", "4", "5", "6" }, 
       Values { "Other","Unknown","None","Parity","Single-bit ECC","Multi-bit ECC"}]
   uint16 Cache1ErrorMethodology;

   [Description (
          "Cache ErrorMethodology - Contains the enumerated value "
          "that describes the cache's error detection/correction "
          "mechanism" ),
       ValueMap { "1", "2", "3", "4", "5", "6" }, 
       Values { "Other","Unknown","None","Parity","Single-bit ECC","Multi-bit ECC"}]
   uint16 Cache2ErrorMethodology;

   [Description (
          "Cache ErrorMethodology - Contains the enumerated value "
          "that describes the cache's error detection/correction "
          "mechanism" ),
       ValueMap { "1", "2", "3", "4", "5", "6" }, 
       Values { "Other","Unknown","None","Parity","Single-bit ECC","Multi-bit ECC"}]
   uint16 Cache3ErrorMethodology;   
      
      [Description ( 
          "Defines whether this is for instruction caching "
          "(value=3), data caching (value=4) or both (value=5, "
          "\"Unified\"). Also, \"Other\" (1) and \"Unknown\" (2) "
          "can be defined." ), 
       ValueMap { "1", "2", "3", "4", "5" }, 
       Values { "Other", "Unknown", "Instruction", "Data", "Unified" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.9" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherCacheTypeDescription" }]
   uint16 Cache1Type;
   
      [Description ( 
          "Defines whether this is for instruction caching "
          "(value=3), data caching (value=4) or both (value=5, "
          "\"Unified\"). Also, \"Other\" (1) and \"Unknown\" (2) "
          "can be defined." ), 
       ValueMap { "1", "2", "3", "4", "5" }, 
       Values { "Other", "Unknown", "Instruction", "Data", "Unified" },  
       MappingStrings { "MIF.DMTF|System Cache|006.9" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherCacheTypeDescription" }]
   uint16 Cache2Type;
   
      [Description ( 
          "Defines whether this is for instruction caching "
          "(value=3), data caching (value=4) or both (value=5, "
          "\"Unified\"). Also, \"Other\" (1) and \"Unknown\" (2) "
          "can be defined." ), 
       ValueMap { "1", "2", "3", "4", "5" }, 
       Values { "Other", "Unknown", "Instruction", "Data", "Unified" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.9" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherCacheTypeDescription" }]
   uint16 Cache3Type;

      [Description ( 
          "An integer enumeration defining the system cache "
          "associativity. For example, 6 indicates a fully "
          "associative cache." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" }, 
       Values { "Unknown", "Other",  "Direct Mapped", 
          "2-way Set-Associative", "4-way Set-Associative", 
          "Fully Associative", "8-way Set-Associative", 
          "16-way Set-Associative", "12-way Set Associative", 
          "24-way Set Associative", "32-way Set Associative", 
          "48-way Set Associative", "64-way Set Associative",
	  "20-way Set Associative" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.15" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherAssociativityDescription" }]


   uint16 Cache1Associativity;
   
   [Description ( 
          "An integer enumeration defining the system cache "
          "associativity. For example, 6 indicates a fully "
          "associative cache." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" }, 
       Values { "Unknown", "Other", "Direct Mapped", 
          "2-way Set-Associative", "4-way Set-Associative", 
          "Fully Associative", "8-way Set-Associative", 
          "16-way Set-Associative", "12-way Set Associative", 
          "24-way Set Associative", "32-way Set Associative", 
          "48-way Set Associative", "64-way Set Associative",
	  "20-way Set Associative" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.15" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherAssociativityDescription" }]
   uint16 Cache2Associativity;
  
   [Description ( 
          "An integer enumeration defining the system cache "
          "associativity. For example, 6 indicates a fully "
          "associative cache." ), 
       ValueMap { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14" }, 
       Values { "Unknown", "Other", "Direct Mapped", 
          "2-way Set-Associative", "4-way Set-Associative", 
          "Fully Associative", "8-way Set-Associative", 
          "16-way Set-Associative", "12-way Set Associative", 
          "24-way Set Associative", "32-way Set Associative", 
          "48-way Set Associative", "64-way Set Associative",
	  "20-way Set Associative" }, 
       MappingStrings { "MIF.DMTF|System Cache|006.15" }, 
       ModelCorrespondence { 
          "CIM_AssociatedCacheMemory.OtherAssociativityDescription" }]
   uint16 Cache3Associativity;

	[Description (
          "Specifies the location of Cache1" ),
       ValueMap { "0", "1", "2", "3"},
       Values { "Internal","External","Reserved","Unknown"}]
   uint8 Cache1Location;

	 [Description (
          "Specifies the location of Cache2" ),
       ValueMap { "0", "1", "2", "3"},
       Values { "Internal","External","Reserved","Unknown"}]
   uint8 Cache2Location;
   
	 [Description (
          "Specifies the location of Cache3" ),
       ValueMap { "0", "1", "2", "3"},
       Values { "Internal","External","Reserved","Unknown"}]
   uint8 Cache3Location;

};
